---
title: "Generic arm analysis"
author: "James Watson"
format: html
editor: visual
---

```{r preambule}
knitr::opts_chunk$set(cache = F, cache.comments = FALSE,
                      echo = F, include = TRUE, 
                      fig.width = 8, fig.height = 8,
                      fig.pos = 'H',dev = 'png', dpi = 300)

```

```{r setup}
library(rstan)
library(tidyverse)
library(kableExtra)
library(finalfit)
library(RColorBrewer)
library(lubridate)
library(brms)
library(scales)
library(ggplot2)
library(cowplot)

## information on software/hardware used
version
sessionInfo()

rstan_options(auto_write = TRUE)
## parameters for the analysis
Dmax = 5.5
RUN_MODELS = F
add_epoch = T # if using non-concurrent controls
nperiod <- 10 # for temporal random effects 

my_probs = c(0.025, 0.1, .5, .9, .975)
source('functions.R') 
source('Data_curation/user_settings.R')
trt_colors = get_trt_colors()

interim_version <- "v14"
```

All paths are local

## Load data

Set up analysis

```{r load_data}
intervention = 'interim_all';ref_arm = 'No study drug'
# intervention = 'MolPax_combination'; ref_arm = 'Nirmatrelvir'
# intervention = 'Nitazoxanide'; ref_arm = 'No study drug'
# intervention = 'Hydroxychloroquine';ref_arm = 'No study drug'  
#intervention = 'Ensitrelvir'; ref_arm = 'Nirmatrelvir'
# intervention = 'Metformin';ref_arm = 'No study drug'  
#intervention = 'Atilotrelvir';ref_arm = 'No study drug'  
#intervention = 'Atilotrelvir';ref_arm='Nirmatrelvir'
# intervention = 'Unblinded_meta';ref_arm = 'No study drug'

if(ref_arm=='No study drug'){
  study_threshold = 1.2 # 
}
if(ref_arm=='Nirmatrelvir'){
  study_threshold = 0.9
}
if(intervention=='MolPax_combination'){
  study_threshold = 1.2
}
```

```{r define_population}
#| echo: false
# set as file with relevant dataset
itt_population_all = get_itt_population(prefix_drop_rand = prefix_drop_rand)

f_name = paste0('Analysis_Data/',intervention,'_analysis.csv')
platcov_dat = read.csv(f_name)
platcov_dat$Trt[platcov_dat$Trt=='Nirmatrelvir + Ritonavir']='Nirmatrelvir'
platcov_dat$Trt[platcov_dat$Trt=='Nirmatrelvir + Ritonavir + Molnupiravir']='Nirmatrelvir+Molnupiravir'
platcov_dat$Rand_date = as.POSIXct(platcov_dat$Rand_date)
trt_intervention = unique(platcov_dat$Trt)

if(!all(platcov_dat$ID %in% itt_population_all$ID)) stop('IDs do not match ITT population')

for(tt in unique(trt_intervention)){
  writeLines(sprintf('Missing patients in %s arm:',tt))
  print(itt_population_all$ID[itt_population_all$Treatment==tt &
                                !itt_population_all$ID %in% platcov_dat$ID])
}
# interventions
if(length(trt_intervention)==0) stop('no interventions!')
trts = trt_intervention[trt_intervention!=ref_arm] # get interventions
```

## Make modified intention to treat population

```{r make_analysis_data}
#| echo: false
platcov_dat = platcov_dat %>% group_by(ID) %>%
  mutate(
    mITT = any(Per_protocol_sample==1 & Timepoint_ID>=3) & !all(CT_NS==40),
    mITT2 = !all(CT_NS==40))

pop_table = platcov_dat %>% distinct(ID, .keep_all = T)
table(Intervention=pop_table$Trt, `mITT population` = pop_table$mITT)
table(Intervention=pop_table$Trt, `mITT population` = pop_table$mITT2)
```

```{r}
table(Site=pop_table$Site, `mITT population` = pop_table$mITT)
table(Site=pop_table$Site, `mITT population` = pop_table$mITT2)
```

```{r}
timeline <- plot_randomisation(platcov_dat %>% distinct(ID, .keep_all = T))
timeline
```

```{r}
plot_name <- paste0(prefix_dropbox, "/Interim Analysis Reports/Plots_", interim_version, "/", intervention,  "_recruitment.png")

if(intervention == "interim_all"){wd = 12; ht = 6}else{wd = 10; ht = 5}

png(plot_name, width = wd, height = ht, units = 'in', res = 300)
timeline
dev.off()
```

```{r}
platcov_dat %>%
  ungroup() %>%
  summarise(min_date = min(Rand_date),
            max_date = max(Rand_date))
```

## Baseline characteristics

```{r}
#| echo: false
platcov_dat = platcov_dat %>% group_by(ID, Timepoint_ID) %>%
  mutate(daily_VL = mean(log10_viral_load),
         daily_CT = mean(CT_NS)) %>% 
  ungroup() %>%
  mutate(Sex = as.factor(ifelse(Sex==1,'Male','Female')),
         Site = as.factor(Site),
         Trt = factor(Trt, levels=c(ref_arm, trts)),
         Vaccinated = as.factor(ifelse(N_dose>0,'Yes','No')),
         Variant = as.factor(Variant),
         trt_color = 
           as.character(plyr::mapvalues(Trt,
                                        from = names(trt_colors),
                                        to = trt_colors)),
         Study_time = as.numeric(difftime(Rand_date,min(Rand_date),units = 'weeks')),
         Study_time = scale(Study_time) #normalise
  )

Baseline_data = platcov_dat %>% ungroup() %>% 
  filter(Timepoint_ID==0) %>% 
  distinct(ID, .keep_all = T) %>%
  mutate(Baseline.viral.load = daily_VL,
         Baseline.CT = daily_CT)

tab.ff <- Baseline_data %>% filter(mITT) %>%
  summary_factorlist(
    dependent = "Trt", # name of grouping / treatment variable
    explanatory = c("Site", "Age", 'BMI', "Weight",
                    "Baseline.viral.load",'Sex',
                    "Variant2",'Symptom_onset','Vaccinated'),
    total_col = TRUE, # add column with statistics for the whole sample
    add_row_total = TRUE, # add column with number of valid cases
    include_row_missing_col = FALSE,
    add_dependent_label = T,
    na_include = TRUE # make variables' missing data explicit
  ) %>%
  kbl(
    caption = "Baseline characteristics",
    booktabs = TRUE,
    align = "lrlrrr",
  ) %>%
  kable_classic(full_width = FALSE)
tab.ff
```

```{r}
# Prepare for temporal random effect
quant <- quantile(Baseline_data$Rand_date, seq(0,1,1/nperiod))

platcov_dat <- platcov_dat %>% 
  mutate(period_id = cut(Rand_date, breaks = quant, include.lowest = TRUE, labels = FALSE)) 
```

## Fit models

```{r}
#| echo: false
source('priors.R')

# Analysis data
platcov_dat_analysis = 
  platcov_dat %>% ungroup() %>%
  filter(Time <= Dmax, mITT, Timepoint_ID < ceiling(Dmax)) %>%
  arrange(log10_viral_load==log10_cens_vl) %>%
  mutate(Variant = as.factor(Variant),
         Epoch = paste(month(Rand_date), year(Rand_date), sep = '_'),
         Site = as.factor(Site),
         RnaseP_scaled = scale(40 - CT_RNaseP,scale = F),
         Mean_age = mean(Age[!duplicated(ID)]),
         SD_age = sd(Age[!duplicated(ID)]),
         Age_scaled = (Age-Mean_age)/SD_age,
         Symptom_onset = ifelse(is.na(Symptom_onset),2,Symptom_onset)) 


writeLines(sprintf('Analysis dataset contains %s patients and %s datapoints (%s above LLOD, %s%%)',
                   length(unique(platcov_dat_analysis$ID)),
                   nrow(platcov_dat_analysis),
                   sum(platcov_dat_analysis$CT_NS<40),
                   round(100*mean(platcov_dat_analysis$CT_NS<40))))

covs_base = c('Site','Study_time')
covs_full=c(covs_base, 'Age_scaled','Symptom_onset')
stan_inputs = 
  make_stan_inputs(input_data_fit = platcov_dat_analysis,
                   int_covs_base = c(covs_base,'Symptom_onset'),
                   int_covs_full = covs_full,
                   slope_covs_base = covs_base,
                   slope_covs_full = covs_full,
                   trt_frmla = formula('~ Trt'),
                   epoch = add_epoch,
                   Dmax = Dmax)

stan_inputs$analysis_data_stan$period_id <- platcov_dat_analysis$period_id
stan_inputs$analysis_data_stan$n_period <- length(unique(stan_inputs$analysis_data_stan$period_id))
```

```{r setup_models}
all_mods = list.files('Stan_models',full.names = TRUE,pattern = '*stan')

if(!intervention %in% c('Unblinded_meta', 'interim_all')){mods = 'Stan_models/Linear_model_RNaseP.stan'} else {mods = 'Stan_models/Linear_model_temporal_RE.stan'}

model_settings = expand.grid(mod = mods,
                             prior = 1,
                             cov_matrices = 1)

model_settings$Niter = 2000
model_settings$Nwarmup = 1000
model_settings$Nthin = 4
model_settings$Nchain = 4

writeLines(sprintf('We are running all models with %s chains and %s samples for each chain, discarding %s for burn-in and thining every %s, thus giving a total of %s posterior samples per model.',
                   unique(model_settings$Nchain),
                   unique(model_settings$Niter),
                   unique(model_settings$Nwarmup),
                   unique(model_settings$Nthin), 
                   unique(model_settings$Nchain*(model_settings$Niter-model_settings$Nwarmup)/model_settings$Nthin)))

model_setup_f_name = paste0('Rout/model_run_setup_',intervention,'.RData')
save(model_settings, 
     platcov_dat_analysis,
     stan_inputs, 
     all_priors,
     file = model_setup_f_name)
```

```{r}
if(RUN_MODELS){
  system(paste('Rscript --vanilla run_models_local.R',intervention))
}
```

```{r}
if (ref_arm == 'No study drug') {
  # vs NSD
  ff = list.files('Rout/', pattern = paste0(intervention,'.RData'),)
} else {
  # vs positive control
  ff = list.files('Rout/', pattern = paste0(intervention, '_vs_', ref_arm,'.RData'),)
}

ff = ff[grep(pattern = 'model_fits_',x = ff, ignore.case = T)]
if(!length(ff)==nrow(model_settings)) stop('not all outputs are ready for all model settings')
ff = paste0('Rout/',ff)
```

## main model selection

```{r}
# main_mod = which(model_settings$prior==1&
#                    model_settings$cov_matrices==1&
#                    model_settings$mod==all_mods[3])

main_mod = 1

model_cols = brewer.pal(n = 8, name = 'Dark2')[1:nrow(model_settings)]
names(model_cols) = paste('model', 1:nrow(model_settings))
```

```{r get_effects}
effect_ests=list()
for(i in 1:length(ff)){
  load(ff[i])
  effect_ests[[i]] = 
    summary(out, pars='trt_effect',use_cache=F,probs=my_probs)$summary[,c('2.5%','10%','50%','90%','97.5%'),drop=F]
  rownames(effect_ests[[i]]) = trts
  names(effect_ests)[i] <-  gsub("\\_.*", "", gsub("\\..*", "", gsub(".*/", "", model_settings$mod[i])))
}
effect_ests
```

## Plot viral dynamics

```{r}
G1 <- plot_vl(dataplot = platcov_dat_analysis, trt_colors = trt_colors)
G1
```

```{r}
G1_box <- plot_vl_box(dataplot = platcov_dat_analysis, trt_colors = trt_colors)
G1_box
```

```{r}
plot_name <- paste0(prefix_dropbox, "/Interim Analysis Reports/Plots_", interim_version, "/", intervention, ".png")

png(plot_name, width = 8, height = 5, unit = 'in', res = 300)
G1_box
dev.off()
```

## Plot half-life

```{r}

load(ff[main_mod])

slopes = rstan::extract(out, pars='slope')$slope
analysis_data_stan = stan_inputs$analysis_data_stan
t12_output = data.frame(t_12_med = 24*log10(.5)/apply(slopes,2,mean),
                          t_12_up = 24*log10(.5)/apply(slopes,2,quantile,.9),
                          t_12_low = 24*log10(.5)/apply(slopes,2,quantile,.1),
                          slope_median = apply(slopes,2,median),
                          ID_stan = analysis_data_stan$id[analysis_data_stan$ind_start])
t12_output = merge(t12_output, stan_inputs$ID_map, by = 'ID_stan')

# For temporal random effects
if(intervention == 'interim_all'){
  slopes = rstan::extract(out, pars='slope')$slope
  slope_period = rstan::extract(out, pars='slope_period')$slope_period

analysis_data_stan = stan_inputs$analysis_data_stan
t12_output = data.frame(t_12_med = 24*log10(.5)/apply(slopes,2,median),
                        t_12_up = 24*log10(.5)/apply(slopes,2,quantile,.9),
                        t_12_low = 24*log10(.5)/apply(slopes,2,quantile,.1),
                        
                        slope_median = apply(slopes,2,median),
                        slope_low = apply(slopes,2,quantile,.1),
                        slope_up = apply(slopes,2,quantile,.9),

                        slope_period_median = apply(slope_period, 2, median),
                        slope_period_low = apply(slope_period, 2, quantile, .1),
                        slope_period_up = apply(slope_period, 2, quantile, .9),

                        ID_stan = analysis_data_stan$id[analysis_data_stan$ind_start])
t12_output = merge(t12_output, stan_inputs$ID_map, by = 'ID_stan')
}


Half_life <- t12_output
Half_life <- platcov_dat_analysis %>%
  filter(Timepoint_ID == 0) %>%
  distinct(ID, Trt, .keep_all = T) %>%
  merge(Half_life, by.x = "ID", by.y = "ID_key") %>%
  arrange(Trt, t_12_med)

Half_life$ID <- as.factor(Half_life$ID)
Half_life$ID <- factor(Half_life$ID, levels = Half_life$ID)
Half_life
```

```{r}
G_hl <- plot_hl(Half_life, trt_colors)
G_hl
```

## Plot treatment effects

```{r}
unblinded_arms <- c("Metformin", "Atilotrelvir/ritonavir")

G2 <- plot_trt_effs_2(effect_ests = effect_ests, model_cols = model_cols, study_threshold = study_threshold, intervention = intervention, unblinded_arms = unblinded_arms, lower=-80, upper=40)

G2
```

```{r}
if (ref_arm == "No study drug") {
plot_name <- paste0(prefix_dropbox, "/Interim Analysis Reports/Plots_", interim_version, "/", intervention, "_trt.png")
} else {
  plot_name <- paste0(prefix_dropbox, "/Interim Analysis Reports/Plots_", interim_version, "/", intervention, "_vs_", ref_arm ,"_trt.png")
}

png(plot_name, width = 8, height = 4, unit = 'in', res = 500)
G2
dev.off()
```

```{r}
plot_name <- paste0(prefix_dropbox, "/Interim Analysis Reports/Plots_", interim_version, "/", intervention, "_t12_trt.png")

png(plot_name, width = 12, height = 6, unit = 'in', res = 300)
plot_grid(G_hl, G2, ncol = 2, align = "hv", axis = "b")
dev.off()
```

## Summarize treatment effect

```{r}

for(j in 1:length(ff)){
  effect_ests_rep <- effect_ests[[j]]
  effect_ests_rep <- formatter(exp(effect_ests_rep))
for(i in 1:nrow(effect_ests_rep)){
  writeLines(sprintf('%s model:\nEstimated treatment effect of %s relative to %s is %s%% [95%% CrI: %s to %s %%]\n', 
                     names(effect_ests)[j],
                     rownames(effect_ests_rep)[i],
                     ref_arm,
                     round(effect_ests_rep[i, 3],2),
                     round(effect_ests_rep[i, 1],2),
                     round(effect_ests_rep[i, 5],2)
             )
  )
}
}
```

```{r, echo=F}
# Define positive control arm
pos_control <- "Nirmatrelvir"

ind <- 1

load(ff[ind])

trt_effect <- rstan::extract(out, pars = 'trt_effect')$trt %>% as.data.frame()

# Call these variables again (already declared earlier)
# Specify posterior sampling for each treatment for all iterations
trts <- setdiff(trt_intervention, ref_arm)
colnames(trt_effect) = trts

# Initialize an empty list to store relative effects
rel_effect_list <- list()

# Loop over each column, except the pos_control
for (trt in setdiff(colnames(trt_effect), pos_control)) {
  rel_effect_list[[trt]] <- trt_effect[[trt]] - trt_effect[[pos_control]]
}

# Add the negated Favipiravir as "No Study Drug"
rel_effect_list[["No Study Drug"]] <- -trt_effect[[pos_control]]

# Combine into a data frame
trt_effects_pos_rel <- as.data.frame(rel_effect_list)

# Compute quantiles for each treatment arm (column)
effect_ests_pos_rel <- apply(trt_effects_pos_rel, 2, quantile, probs = my_probs, na.rm = TRUE)
effect_ests_pos_rel <- as.data.frame(t(effect_ests_pos_rel))

# Manually fix rowname
rownames(effect_ests_pos_rel)[1] <- "Atilotrelvir/Ritonavir"
rownames(effect_ests_pos_rel)[2] <- "No Study Drug"

# Create plotting dataframe
effect_ests_plot <- effect_ests_pos_rel
effect_ests_plot <- exp(effect_ests_plot)  # exponentiate estimates
colnames(effect_ests_plot) <- c("L95", "L80", "med", "U80", "U95")
effect_ests_plot$arm <- rownames(effect_ests_plot)
effect_ests_plot$arm <- factor(effect_ests_plot$arm, levels = rownames(effect_ests_plot))  # preserve order
effect_ests_plot$model <- "Linear"

# Define threshold and formatting
pos_threshold <- 0.9

# Set color manually
model_cols <- c("Linear" = "#1b9e77")

# # Define plot
# my.labs <- levels(effect_ests_plot$arm)
# G3 <- ggplot(effect_ests_plot, aes(x = arm, y = med, col = model, group = model)) +
#   geom_rect(aes(ymin = 0.9, ymax = 1.1, xmin = 0, xmax = length(my.labs) + 1), 
#           fill = "#7D7C7C", alpha = 0.2, col = NA) +
#   geom_rect(aes(ymin = min(0.75, min(effect_ests_plot$L95)-0.05), 
#               ymax = 0.9, xmin = 0, xmax = length(my.labs) + 1), 
#           fill = "#D3D3D3", alpha = 0.2, col = NA) +
#   geom_point(position = position_dodge(width = 0.5), size = 4) +
#   geom_errorbar(aes(ymin = L95, ymax = U95),
#                 position = position_dodge(width = 0.5), width = 0, linewidth = 0.65) +
#   geom_errorbar(aes(ymin = L80, ymax = U80),
#                 position = position_dodge(width = 0.5), width = 0, linewidth = 1.5) +
#   geom_hline(yintercept = 1, col = "red", linetype = "dashed") +
#   coord_flip() +
#   theme_bw() +
#   scale_color_manual(values = model_cols) +
#   scale_y_continuous(limits = c(min(0.75, min(effect_ests_plot$L95) - 0.05), 
#                                 max(effect_ests_plot$U95) + 0.25), 
#                      expand = c(0, 0),
#                      breaks = seq(0.2, 10, 1)) +
#   ylab("Change in viral clearance rate (%)") +
#   xlab("") +
#   ggtitle(paste0("Estimated treatment effects relative to ", tolower(pos_control), " arm")) +
#   theme(axis.title  = element_text(face = "bold"),
#         plot.title = element_text(face = "bold"),
#         legend.position = "bottom",
#         axis.text = element_text(size = 20))
# Custom label function
percent_rel_label <- function(x) {
  paste0(round(100 * (x - 1), 0), "%")
}

# Define plot
my.labs <- levels(effect_ests_plot$arm)
G3 <- ggplot(effect_ests_plot, aes(x = arm, y = med, col = model, group = model)) +
  # Shaded bars
  geom_rect(aes(ymin = 0.9, ymax = 1.1, xmin = 0, xmax = length(my.labs) + 1), 
            fill = "#7D7C7C", alpha = 0.2, col = NA) +
  geom_rect(aes(ymin = min(0.75, min(effect_ests_plot$L95)-0.05), 
                ymax = 0.9, xmin = 0, xmax = length(my.labs) + 1), 
            fill = "#D3D3D3", alpha = 0.2, col = NA) +
  
  # Points + error bars
  geom_point(position = position_dodge(width = 0.5), size = 4) +
  geom_errorbar(aes(ymin = L95, ymax = U95),
                position = position_dodge(width = 0.5), width = 0, linewidth = 0.65) +
  geom_errorbar(aes(ymin = L80, ymax = U80),
                position = position_dodge(width = 0.5), width = 0, linewidth = 1.5) +
  
  # Reference line
  geom_hline(yintercept = 1, col = "red", linetype = "dashed") +
  
  coord_flip() +
  theme_bw() +
  scale_color_manual(values = model_cols) +
  scale_y_continuous(limits = c(min(0.75, min(effect_ests_plot$L95) - 0.05), 
                     max(effect_ests_plot$U95) + 0.25), 
                     expand = c(0, 0),
                     breaks = c(0.9, 1.1),
                     labels = percent_rel_label) +
  ylab("Change in viral clearance rate (%)") +
  xlab("") +
  ggtitle(paste0("Estimated treatment effects relative to ", pos_control, " arm")) +
  theme(axis.title  = element_text(face = "bold"),
        plot.title = element_text(face = "bold"),
        legend.position = "bottom",
        axis.text = element_text(size = 20))
plot_name_pos <- paste0(prefix_dropbox, "/Interim Analysis Reports/Plots_", interim_version, "/", intervention, "_esimated_effect_vs_positive_arm.png")

png(plot_name_pos, width = 8, height = 4, units = "in", res = 600)
G3
dev.off()
```

## Rebound

```{r rebound_visual_assessment}
IDs_analysis = unique(platcov_dat_analysis$ID)

platcov_dat_rebound = platcov_dat%>% filter(ID %in% IDs_analysis)
platcov_dat_rebound = find_rebounds(platcov_dat = platcov_dat_rebound,
                            lower_bound = 2, 
                            upper_bound = 3,
                            t_window = 1.5,
                            day_min = 4)

#print(unique(platcov_dat_rebound$ID[platcov_dat_rebound$rebound==1]))
#par(mfrow=c(3,1), las=1, cex.lab=1.3, cex.axis=1.3)
#platcov_dat_rebound = platcov_dat_rebound %>% filter(rebound==1)

# for(tt in unique(platcov_dat_rebound$Trt)){
#   xx = platcov_dat_rebound %>% filter(Trt==tt)
#   plot(xx$Time, xx$daily_VL, panel.first=grid(),
#        xlab='Time since randomisation (days)', ylab = 'SARS CoV2 genomes/mL',
#        ylim = range(platcov_dat$daily_VL), xlim=c(0,15),
#        col = xx$trt_color, yaxt='n')
#     axis(2, at = c(2,4,6,8), labels = c(expression(10^2),
#                                         expression(10^4),
#                                         expression(10^6),
#                                         expression(10^8)))
#     abline(h=c(2,3), lty=2)
#   title(paste0(tt,' (n=',length(unique(xx$ID)),'/',
#                length(unique(platcov_dat_analysis$ID[platcov_dat_analysis$Trt==tt])),')'))
#   for(id in unique(xx$ID)){
#     xx_id = xx%>%filter(ID==id)
#     lines(xx_id$Time, xx_id$daily_VL, col = adjustcolor(xx_id$trt_color,alpha.f = .6))
#   }
# }

```

```{r}
# G_rebounds <-  plot_rebound(platcov_dat_analysis, platcov_dat_rebound %>% filter(rebound == 1), trt_colors)
# G_rebounds
```

```{r}
# f_name <- paste0(prefix_dropbox, "/Interim Analysis Reports/Plots_", interim_version, "/plot_rebound_", intervention, ".pdf")
# 
# pdf(f_name, width = 6, height = 6)
# G_rebounds
# dev.off()
```

```{r}
# kruskal.test(Time_rebound ~ Trt, platcov_dat_rebound %>% filter(rebound) %>% distinct(ID, .keep_all = T) )
# 
# attach(platcov_dat_rebound %>% filter(rebound) %>% distinct(ID, .keep_all = T))
# pairwise.wilcox.test(Time_rebound, Trt,p.adjust.method = "bonf")
# detach()
```

```{r}
# rebound_fq <- platcov_dat_rebound %>%
#   distinct(ID, .keep_all = T) %>%
#   group_by(Trt) %>%
#   summarise(x = sum(rebound),
#             n = n(),
#             x_prime = n - x)
# rebound_fq
```

```{r}
# prop.test(rebound_fq$x, rebound_fq$n, correct = T)
```

```{r}
# rebound_fq2 <- rebound_fq %>% filter(Trt != "No study drug")
# prop.test(rebound_fq2$x, rebound_fq2$n, correct = T)
```

```{r}
# platcov_dat_rebound$clear_check <- "Less than 100"
# platcov_dat_rebound$clear_check[platcov_dat_rebound$daily_VL >= log10(100)] <- "More than 100"
# platcov_dat_rebound$clear_check[platcov_dat_rebound$daily_VL >= log10(1000)] <- "More than 1000"
# 
# rebound_heatmap <- ggplot(platcov_dat_rebound %>% filter(rebound == 1), 
# aes(y = ID, x = as.factor(Timepoint_ID), fill = clear_check)) +
#   geom_tile(col = "white", linewidth = 0.75) +
#   facet_grid(Trt ~ ., scales = "free", space='free') +
#   scale_fill_manual(values = rev(c("#B80000", "#F6D776", "#86A7FC")), name = "SARS-CoV-2 \ngenomes per mL") +
#   theme_bw() +
#   xlab("Time since randomisation (days)") +
#   ylab("")+
#   theme(axis.title = element_text(size = 12, face = "bold"),
#         strip.text = element_text(size = 10, face = "bold"))
# rebound_heatmap
```

```{r}
# f_name <- paste0(prefix_dropbox, "/Interim Analysis Reports/Plots_", interim_version, "/plot_rebound_heatmap.pdf")
# 
# pdf(f_name, width = 6, height = 8)
# rebound_heatmap
# dev.off()
```

```{r}
# G_rebound_tl <- ggplot(platcov_dat_rebound %>% distinct(ID, .keep_all = T), 
#        aes(x = Rand_date, y = Trt)) +
#   geom_point(aes(col = rebound, size = rebound), alpha = 0.5) +
#   scale_color_manual(values = c("black", "red")) +
#   scale_size_manual(values = c(3,6)) +
#   theme_bw(base_size = 14) +
#   theme(legend.position = "none") +
#   xlab("Randomisation date") +
#   ylab("")
# G_rebound_tl
```

```{r}
# f_name <- paste0(prefix_dropbox, "/Interim Analysis Reports/Plots_", interim_version, "/plot_rebound_timeline.pdf")
# 
# pdf(f_name, width = 6, height = 5)
# G_rebound_tl
# dev.off()
```

```{r Figure_main, fig.height=6, fig.width=9}

par(las=1, mar=c(5,5,2,2),cex.lab=1.3, cex.axis=1.3, mfrow=c(1,2))
plot_serial_data(xx = platcov_dat_analysis,xlims = c(0,7))

par(las=1, mar=c(5,8,2,2))

plot_effect_estimates(effect_ests = effect_ests,
                      plot_models = 1:length(ff),
                      study_threshold = study_threshold,
                      mod_cols = model_cols[1:length(ff)],
                      my_pch = 15:(15+nrow(model_settings)-1))
# title(intervention)
legend('right',pch=15:16,legend = c('Linear','Non-linear'),
       col = model_cols,inset=0.03, cex=1.2)



for(i in 1:length(ff)){
  load(ff[i])
  writeLines(sprintf('For model setting %s', i))
  trt_estimates = rstan::extract(out, pars = 'trt_effect')$trt_effect
  for(j in 1:ncol(trt_estimates)){
    print(round(100*(exp(quantile(trt_estimates[,j], probs = my_probs))-1)))
    print(mean(trt_estimates[,j]>log(study_threshold)))
    print(mean(trt_estimates[,j]<log(study_threshold)))
  }
}
```

```{r slopes_plot}
load(ff[1])
par(las=1, cex.lab=1.5, cex.axis=1.5)
slope_out=make_slopes_plot(stan_out = out, 
                           analysis_data_stan = stan_inputs$analysis_data_stan,
                           ID_map = stan_inputs$ID_map,
                           data_summary = Baseline_data,
                           my_lims = c(2,30),
                           my_vals = c(5,10, 15,20,30))

# sero_dat = read_csv('Analysis_Data/Serology_IgG.csv')
# sero_dat = merge(slope_out, sero_dat, by='ID', all=F)
# 
# sero_dat = sero_dat %>% 
#   filter(!is.na(log10_IgG)) %>% group_by(ID) %>%
#   mutate(Day = ifelse(Day<=7, Day, 14),
#          Baseline_IgG = ifelse(sum(Day==0)>0,log10_IgG[Day==0],NA)) %>%
#   group_by(ID, Day) %>%
#   mutate(Delta_IgG = log10_IgG-Baseline_IgG)
# 
# par(mfrow=c(3,2))
# for(dd in sort(unique(sero_dat$Day))){
#   sero_dat_dd = sero_dat%>%filter(Day==dd)
#   plot(sero_dat_dd$slope_median, sero_dat_dd$log10_IgG, xlab='slope',
#        ylab='log IgG', main= paste('Day',dd), panel.first=grid(),
#        ylim = range(sero_dat$log10_IgG))
#   cor.test(sero_dat_dd$slope_median, sero_dat_dd$log10_IgG)
#   mod=lm(log10_IgG~slope_median, data= sero_dat_dd)
#   abline(mod, col='red',lwd=3)
#   print(summary(mod))
#   if(dd>0){
#     plot(sero_dat_dd$slope_median, sero_dat_dd$Delta_IgG, xlab='slope',
#        ylab='Delta IgG', main= paste('Day',dd), panel.first=grid(),
#        ylim = range(sero_dat$Delta_IgG,na.rm=T))
#   }
# }
# 
# 
# sero_wide = 
#   sero_dat %>% pivot_wider(names_from = Day, 
#                                      values_from = c(log10_IgG,Delta_IgG),
#                                      values_fill = NA,
#                                      values_fn = mean)
# 
# par(mfrow=c(2,2))
# sero_no_increase = sero_dat%>% filter(Day>=7 & log10_IgG<=4)
# plot_individ_curves(platcov_dat = platcov_dat, IDs = unique(sero_no_increase$ID),xlims = c(0,14))
```

```{r coef_plot}
coef_to_plot=1
coef_model = which(model_settings$prior==1&
                     model_settings$cov_matrices==coef_to_plot&
                     model_settings$mod==all_mods[2])
load(ff[coef_model])
par(las=1, mfrow=c(1,2), mar=c(5,7,2,2))
plot_coef_effects(stan_out = out,cov_mat = coef_to_plot,stan_inputs = stan_inputs)
```

## Individual patient data

```{r}

# IDS_slow = slope_out$ID[which(slope_out$t_12_med>13 & slope_out$Trt=='Ensitrelvir')]
# # slope_out$ID[IDS_slow]
# par(mfrow=c(3,3),las=1, mar=c(4,5,2,2))
# plot_individ_curves(platcov_dat = platcov_dat, IDs = IDS_slow,
#                     xlims = c(0,14))
# # model_list = list()
# for(i in 1:length(ff)){
#   load(ff[i])
#   model_list[[i]] = out
# }
# 
# ID_map = merge(stan_inputs$ID_map, Baseline_data, by.x = 'ID_key',by.y = 'ID')
# par(mfrow=c(4,4), mar=c(4,4,2,2),las=1)
# plot_data_model_fits(model_list = model_list, 
#                      models_to_plot = 1:2,
#                      K_plots = 16,mod_cols = model_cols,
#                      ID_map = ID_map,
#                      analysis_data_stan = stan_inputs$analysis_data_stan)
```
