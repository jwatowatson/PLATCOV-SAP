---
title: "Generic arm analysis"
author: "James Watson"
format: html
editor: visual
---

```{r preambule}
knitr::opts_chunk$set(cache = F, cache.comments = FALSE,
                      echo = F, include = TRUE, 
                      fig.width = 8, fig.height = 8,
                      fig.pos = 'H',dev = 'png', dpi = 300)

```

```{r setup}
library(rstan)
library(tidyverse)
library(kableExtra)
library(finalfit)
library(RColorBrewer)
library(lubridate)
library(brms)
library(scales)
library(ggplot2)
library(cowplot)

## information on software/hardware used
version
sessionInfo()

rstan_options(auto_write = TRUE)
## parameters for the analysis
Dmax = 8
RUN_MODELS = F
add_epoch = T # if using non-concurrent controls

my_probs = c(0.025, 0.1, .5, .9, .975)
source('functions.R')
source('Data_curation/user_settings.R')
trt_colors = get_trt_colors()
```

All paths are local

## Load data

Set up analysis

```{r load_data}
# intervention = 'interim_all' # prefix of analysis file
# intervention = 'MolPax_combination' # prefix of analysis file
 intervention = 'Ensitrelvir' # prefix of analysis file
# intervention = 'Fluoxetine' # prefix of analysis file
# intervention = 'Nitazoxanide'
# ref_arm = 'No study drug' #
 ref_arm = 'Nirmatrelvir' #
# study_threshold = 1.2 # depending on comparison with no study drug or positive control
 study_threshold = 0.9
```

```{r define_population}
#| echo: false
# set as file with relevant dataset
itt_population_all = get_itt_population(prefix_drop_rand = prefix_drop_rand)

f_name = paste0('Analysis_Data/',intervention,'_analysis.csv')
platcov_dat = read.csv(f_name)
platcov_dat$Trt[platcov_dat$Trt=='Nirmatrelvir + Ritonavir']='Nirmatrelvir'
platcov_dat$Trt[platcov_dat$Trt=='Nirmatrelvir + Ritonavir + Molnupiravir']='Nirmatrelvir+Molnupiravir'
platcov_dat$Rand_date = as.POSIXct(platcov_dat$Rand_date)
trt_intervention = unique(platcov_dat$Trt)

if(!all(platcov_dat$ID %in% itt_population_all$ID)) stop('IDs do not match ITT population')

for(tt in unique(trt_intervention)){
  writeLines(sprintf('Missing patients in %s arm:',tt))
  print(itt_population_all$ID[itt_population_all$Treatment==tt &
                                !itt_population_all$ID %in% platcov_dat$ID])
}
# interventions
if(length(trt_intervention)==0) stop('no interventions!')
trts = trt_intervention[trt_intervention!=ref_arm] # get interventions
```

## Make modified intention to treat population

```{r make_analysis_data}
#| echo: false
platcov_dat = platcov_dat %>% group_by(ID) %>%
  mutate(
    mITT = any(Per_protocol_sample==1 & Timepoint_ID>=3) &
      !all(CT_NS==40))

pop_table = platcov_dat %>% distinct(ID, .keep_all = T)
table(Intervention=pop_table$Trt, `mITT population` = pop_table$mITT)
```

## Grouping variants

To reduce the number of variant groups, as suggested by Liz.

```{r}

platcov_dat$Variant2 <- as.character(platcov_dat$Variant)

platcov_dat$Variant2[platcov_dat$Variant2 %in% c("BA.5.2", "BA.5.5", "BQ.1")] <- "BA.5"
platcov_dat$Variant2[platcov_dat$Variant2 %in% c("BN.1.2", "BN.1.3", "CH.1.1")] <- "BA.2.75"
platcov_dat$Variant2[platcov_dat$Variant2 %in% c("XBB1.5-like with F456L")] <- "XBB.1.5-like"

platcov_dat$Variant2 <- as.factor(platcov_dat$Variant2)
```

## Baseline characteristics

```{r}

#platcov_dat$Variant <- platcov_dat$Variant2

#| echo: false
platcov_dat = platcov_dat %>% group_by(ID, Timepoint_ID) %>%
  mutate(daily_VL = mean(log10_viral_load),
         daily_CT = mean(CT_NS)) %>% 
  ungroup() %>%
  mutate(Sex = as.factor(ifelse(Sex==1,'Male','Female')),
         Site = as.factor(Site),
         Trt = factor(Trt, levels=c(ref_arm, trts)),
         Vaccinated = as.factor(ifelse(N_dose>0,'Yes','No')),
         Variant = as.factor(Variant),
         trt_color = 
           as.character(plyr::mapvalues(Trt,
                                        from = names(trt_colors),
                                        to = trt_colors)),
         Study_time = as.numeric(difftime(Rand_date,min(Rand_date),units = 'weeks')),
         Study_time = scale(Study_time) #normalise
  )

Baseline_data = platcov_dat %>% ungroup() %>% 
  filter(Timepoint_ID==0) %>% 
  distinct(ID, .keep_all = T) %>%
  mutate(Baseline.viral.load = daily_VL,
         Baseline.CT = daily_CT)

tab.ff <- Baseline_data %>% filter(mITT) %>%
  summary_factorlist(
    dependent = "Trt", # name of grouping / treatment variable
    explanatory = c("Site", "Age", 'BMI', "Weight",
                    "Baseline.viral.load",'Sex',
                    "Variant2",'Symptom_onset','Vaccinated'),
    total_col = TRUE, # add column with statistics for the whole sample
    add_row_total = TRUE, # add column with number of valid cases
    include_row_missing_col = FALSE,
    add_dependent_label = T,
    na_include = TRUE # make variables' missing data explicit
  ) %>%
  kbl(
    caption = "Baseline characteristics",
    booktabs = TRUE,
    align = "lrlrrr",
  ) %>%
  kable_classic(full_width = FALSE)
tab.ff
# save_kable(tab.ff,file = 'Baseline_characteristics.png')
```

## Fit models

```{r}
#| echo: false
source('priors.R')

# Analysis data
platcov_dat_analysis = 
  platcov_dat %>% ungroup() %>%
  filter(Time <= Dmax, mITT, Timepoint_ID < ceiling(Dmax)) %>%
  arrange(log10_viral_load==log10_cens_vl) %>%
  mutate(Variant = as.factor(Variant),
         Epoch = paste(month(Rand_date), year(Rand_date), sep = '_'),
         Site = as.factor(Site),
         RnaseP_scaled = scale(40 - CT_RNaseP,scale = F),
         Mean_age = mean(Age[!duplicated(ID)]),
         SD_age = sd(Age[!duplicated(ID)]),
         Age_scaled = (Age-Mean_age)/SD_age,
         Symptom_onset = ifelse(is.na(Symptom_onset),2,Symptom_onset)) 


writeLines(sprintf('Analysis dataset contains %s patients and %s datapoints (%s above LLOD, %s%%)',
                   length(unique(platcov_dat_analysis$ID)),
                   nrow(platcov_dat_analysis),
                   sum(platcov_dat_analysis$CT_NS<40),
                   round(100*mean(platcov_dat_analysis$CT_NS<40))))

covs_base = c('Site','Study_time')
covs_full=c(covs_base, 'Age_scaled','Symptom_onset')
stan_inputs = 
  make_stan_inputs(input_data_fit = platcov_dat_analysis,
                   int_covs_base = c(covs_base,'Symptom_onset'),
                   int_covs_full = covs_full,
                   slope_covs_base = covs_base,
                   slope_covs_full = covs_full,
                   trt_frmla = formula('~ Trt'),
                   epoch = add_epoch,
                   Dmax = Dmax)
```

```{r setup_models}
all_mods = list.files('Stan_models',full.names = TRUE,pattern = '*stan')

# model_settings = rbind(expand.grid(mod = all_mods,
#                              prior = 1,
#                              cov_matrices = 1),
#                        expand.grid(mod = all_mods[1],
#                              prior = 1,
#                              cov_matrices = 2))

model_settings = expand.grid(mod = 'Stan_models/Linear_model_RNaseP.stan',
                             prior = 1,
                             cov_matrices = 1)

model_settings$Niter = 2000
model_settings$Nwarmup = 1000
model_settings$Nthin = 4
model_settings$Nchain = 4

writeLines(sprintf('We are running all models with %s chains and %s samples for each chain, discarding %s for burn-in and thining every %s, thus giving a total of %s posterior samples per model.',
                   unique(model_settings$Nchain),
                   unique(model_settings$Niter),
                   unique(model_settings$Nwarmup),
                   unique(model_settings$Nthin), 
                   unique(model_settings$Nchain*(model_settings$Niter-model_settings$Nwarmup)/model_settings$Nthin)))

model_setup_f_name = paste0('Rout/model_run_setup_',intervention,'.RData')
save(model_settings, 
     platcov_dat_analysis,
     stan_inputs, 
     all_priors,
     file = model_setup_f_name)
```

## BRMS checks

```{r brms_slopes}
# platcov_dat_no_effect = platcov_dat_analysis %>% 
#   filter(Trt %in% c('No study drug', 'Ivermectin',
#                     'Favipiravir', 'Fluoxetine',
#                     'Nitazoxanide'))
# nl_bf_form = 
#   bf(formula = log10_viral_load | cens(censor) ~ alpha0*Time*exp(alpha) + beta0,
#      alpha ~ (1|ID),
#      alpha0 ~ 1,
#      beta0 ~ 1 + (1|ID),
#      nl = T)
# mod_naive = brm(formula = nl_bf_form,
#                 data = platcov_dat_no_effect,
#                 prior = c(prior(normal(-0.5, 0.5), nlpar='alpha0'),
#                           prior(normal(5,2), nlpar=beta0)),
#                 family = 'student', cores = 4, chains = 4)
# mod_naive = brm(log10_viral_load | cens(censor) ~ Time + Site + s(Study_time,k=6) + (1+Time | ID),
#                 data = platcov_dat_no_effect,
#                 prior = c(prior(lkj(2), class = "cor"),
#                           prior(normal(5, 5), class = Intercept),
#                           prior(constant(7), class = 'nu')),
#                 family = 'student', cores = 4, chains = 4)
# thetas = ranef(mod_naive, summary = F)
# mean_slopes = fixef(mod_naive, summary = F)
# slopes_randef = apply(thetas$ID[,,'Time']+mean_slopes[,'Time'], 2,
#                       quantile, probs=c(0.1, 0.5, 0.9))
# slopes_dat = merge(data.frame(ID=colnames(slopes_randef),
#                               slope_re = slopes_randef[2, ],
#                               slope_re_lower = slopes_randef[1, ],
#                               slope_re_upper = slopes_randef[3, ]),
#                    platcov_dat[!duplicated(platcov_dat$ID),],
#                    by = 'ID') %>%
#   arrange(Rand_date)
# mod_gam = mgcv::gam(slope_re ~ s(Study_time,k=5), data=slopes_dat)
# summary(mod_gam)
# par(las=1, family='serif')
# plot(slopes_dat$Rand_date, slopes_dat$slope_re,
#      ylab='Slope random effect',
#      ylim=c(min(slopes_dat$slope_re_lower),
#             max(slopes_dat$slope_re_upper)),
#      col=slopes_dat$trt_color,
#      xlab='Randomisation date', panel.first=grid(), pch=16)
# for(i in 1:nrow(slopes_dat)){
#   lines(rep(slopes_dat$Rand_date[i],2),
#         c(slopes_dat$slope_re_lower[i], slopes_dat$slope_re_upper[i]),
#         col=adjustcolor(slopes_dat$trt_color[i],alpha.f = .4))
# }
# legend('bottomleft',legend = unique(slopes_dat$Trt), col = unique(slopes_dat$trt_color),pch=16,lwd=2,inset=0.02)
# abline(MASS::rlm(slopes_dat$slope_re~slopes_dat$Rand_date),
#        col='darkblue',lwd=3,lty=2)
# lines(slopes_dat$Rand_date, predict(mod_gam),lwd=3)
# 
# summary(lm(slope_re~Rand_date+Trt, data = slopes_dat))
```

```{r}
if(RUN_MODELS){
  system(paste('Rscript --vanilla run_models_local.R',intervention))
}
```

```{r}
ff = list.files('Rout/', pattern = paste0(intervention,'.RData'),)
ff = ff[grep(pattern = 'model_fits_',x = ff)]
if(!length(ff)==nrow(model_settings)) stop('not all outputs are ready for all model settings')
ff = paste0('Rout/',ff)
```

main model selection

```{r}
main_mod = which(model_settings$prior==1&
                   model_settings$cov_matrices==1&
                   model_settings$mod==all_mods[1])

model_cols = brewer.pal(n = 8, name = 'Dark2')[1:nrow(model_settings)]
names(model_cols) = paste('model', 1:nrow(model_settings))
```

```{r get_effects}
effect_ests=list()
for(i in 1:length(ff)){
  load(ff[i])
  effect_ests[[i]] = 
    summary(out, pars='trt_effect',use_cache=F,probs=my_probs)$summary[,c('2.5%','10%','50%','90%','97.5%'),drop=F]
  rownames(effect_ests[[i]]) = trts
}
```

## Plot viral dynamics

```{r}
dataplot <- platcov_dat_analysis

dataplot$Trt <- as.character(dataplot$Trt)
dataplot$Trt[dataplot$Trt == "Nirmatrelvir + Ritonavir"] <- "Nirmatrelvir"
dataplot$Trt <- as.factor(dataplot$Trt)

dataplot$Trt <- factor(dataplot$Trt, levels = as.character(unique(dataplot[,c("Trt", "trt_color")])$Trt))

dataplot = 
  dataplot %>% ungroup() %>%
  filter(Timepoint_ID %in% c(0:7, 10, 14), mITT) %>%
  arrange(log10_viral_load==log10_cens_vl) %>%
  mutate(Variant = as.factor(Variant),
         Site = as.factor(Site),
         RnaseP_scaled = scale(40 - CT_RNaseP,scale = F),
         Mean_age = mean(Age[!duplicated(ID)]),
         SD_age = sd(Age[!duplicated(ID)]),
         Age_scaled = (Age-Mean_age)/SD_age,
         Symptom_onset = ifelse(is.na(Symptom_onset),2,Symptom_onset)) 

dataplot$Timepoint_ID_num <- dataplot$Timepoint_ID

dataplot2 <- aggregate(log10_viral_load~ID+Timepoint_ID+Timepoint_ID_num+Trt+Site+BMI+Plate+Age+Sex+Symptom_onset, 
                       data = dataplot, FUN = median)

dataplot3<- aggregate(log10_viral_load~Timepoint_ID+Timepoint_ID_num+Trt, data = dataplot, FUN = quantile, c(0.25, 0.5, 0.75))
dataplot3[,4:6] <- as.data.frame(as.matrix(dataplot3[,4]))
colnames(dataplot3)[4:6] <- c("Q1", "Q2", "Q3")

colors <- unique(platcov_dat_analysis$trt_color)


G1 <- ggplot() +
  geom_jitter(data = dataplot, aes(x = Timepoint_ID_num, y = log10_viral_load, col = Trt), 
              alpha = 0.4, size = 1.75, shape = 21,
              width = 0.15) +
  scale_fill_manual(values = colors, name = "") +
  geom_line(data = subset(dataplot3, Timepoint_ID_num <= 7), aes(x =  Timepoint_ID_num, y = Q2, group = Trt, col = Trt), linewidth = 1, linetype = 1) +
  geom_line(data = subset(dataplot3,  Timepoint_ID_num >= 7), aes(x =  Timepoint_ID_num, y = Q2, group = Trt, col = Trt), linewidth = 0.75, linetype = "dashed") +
  geom_point(data = dataplot3, aes(x = Timepoint_ID_num, y = Q2, fill = Trt), size = 3.5, shape = 24) +
  scale_color_manual(values = colors, name = "") +
  theme_bw() +
  scale_x_continuous(breaks = 0:14) +
  scale_y_continuous(labels=label_math(), breaks = seq(0,8,2)) +
  xlab("Time since randomisation (days)") +
  ylab("SARS-CoV-2 genomes/mL") + 
  theme(axis.title  = element_text(face = "bold"),
        plot.title = element_text(face = "bold"),
        legend.position = "bottom",
        axis.text = element_text(size = 10)) +
  ggtitle("A) Viral load dynamics")

G1 
```

## Plot treatment effects

```{r}
formatter <- function(x){  
  (x-1)*100 
}
```

```{r}

effect_ests_plot <- as.data.frame(do.call("rbind", effect_ests))
effect_ests_plot <- exp(effect_ests_plot)

colnames(effect_ests_plot)[1:5] <- c("L95", "L80", "med", "U80", "U95")

effect_ests_plot$trt <- row.names(effect_ests_plot)
effect_ests_plot$trt <- as.factor(effect_ests_plot$trt)

my.labs <- levels(effect_ests_plot$trt)
my.labs[my.labs == "Nirmatrelvir+Molnupiravir"] <- "Nirmatrelvir +\nMolnupiravir"

G2 <- ggplot(effect_ests_plot, 
       aes(x = trt, y = med)) +
  geom_point(position = position_dodge(width = 0.5), size = 4, col =  model_cols) +
  geom_errorbar(aes(x = trt, ymin = L95, ymax = U95),position = position_dodge(width = 0.5), width = 0, linewidth = 0.65, col =  model_cols) +
  geom_errorbar(aes(x = trt, ymin = L80, ymax = U80),position = position_dodge(width = 0.5), width = 0, linewidth = 1.5, col =  model_cols) +
  geom_rect(aes(ymin = 0.75, ymax = study_threshold, xmin = 0, xmax = length(my.labs)+1), fill = "#7D7C7C", alpha = 0.2, col = NA) +
  coord_flip() +
  theme_bw() +
  geom_hline(yintercept = 1, col = "red", linetype = "dashed") +
  scale_y_continuous(labels = formatter, limits = c(0.75, max(effect_ests_plot$U95) + .25), expand = c(0,0)) +
    scale_x_discrete(labels= my.labs) +
  ylab("Change in viral clearance rate (%)") +
  xlab("") +
  ggtitle("B) Estimated treatment effects")  + 
  theme(axis.title  = element_text(face = "bold"),
        plot.title = element_text(face = "bold"),
        legend.position = "bottom",
        axis.text = element_text(size = 10))
G2
```

```{r}
png(paste0("Plots/", intervention, ".png"), unit = "in", res = 350, width = 10, height = 6)
plot_grid(G1, G2, ncol = 2, align = "h", axis = "b")
dev.off()

```

```{r Figure_main, fig.height=6, fig.width=9}

par(las=1, mar=c(5,5,2,2),cex.lab=1.3, cex.axis=1.3, mfrow=c(1,2))
plot_serial_data(xx = platcov_dat_analysis,xlims = c(0,7))

par(las=1, mar=c(5,8,2,2))

plot_effect_estimates(effect_ests = effect_ests,
                      plot_models = 1:length(ff),
                      study_threshold = study_threshold,
                      mod_cols = model_cols[1:length(ff)],
                      my_pch = 15:(15+nrow(model_settings)-1))
# title(intervention)
legend('right',pch=15:16,legend = c('Linear','Non-linear'),
       col = model_cols,inset=0.03, cex=1.2)


for(i in 1:length(ff)){
  load(ff[i])
  writeLines(sprintf('For model setting %s', i))
  trt_estimates = rstan::extract(out, pars = 'trt_effect')$trt_effect
  for(j in 1:ncol(trt_estimates)){
    print(round(100*(exp(quantile(trt_estimates[,j], probs = my_probs))-1)))
    print(mean(trt_estimates[,j]>log(study_threshold)))
    print(mean(trt_estimates[,j]<log(study_threshold)))
  }
}
```

```{r slopes_plot}
load(ff[1])
par(las=1, cex.lab=1.5, cex.axis=1.5)
slope_out=make_slopes_plot(stan_out = out, 
                           analysis_data_stan = stan_inputs$analysis_data_stan,
                           ID_map = stan_inputs$ID_map,
                           data_summary = Baseline_data,
                           my_lims = c(2,30),
                           my_vals = c(5,10, 15,20,30))

# sero_dat = read_csv('Analysis_Data/Serology_IgG.csv')
# sero_dat = merge(slope_out, sero_dat, by='ID', all=F)
# 
# sero_dat = sero_dat %>% 
#   filter(!is.na(log10_IgG)) %>% group_by(ID) %>%
#   mutate(Day = ifelse(Day<=7, Day, 14),
#          Baseline_IgG = ifelse(sum(Day==0)>0,log10_IgG[Day==0],NA)) %>%
#   group_by(ID, Day) %>%
#   mutate(Delta_IgG = log10_IgG-Baseline_IgG)
# 
# par(mfrow=c(3,2))
# for(dd in sort(unique(sero_dat$Day))){
#   sero_dat_dd = sero_dat%>%filter(Day==dd)
#   plot(sero_dat_dd$slope_median, sero_dat_dd$log10_IgG, xlab='slope',
#        ylab='log IgG', main= paste('Day',dd), panel.first=grid(),
#        ylim = range(sero_dat$log10_IgG))
#   cor.test(sero_dat_dd$slope_median, sero_dat_dd$log10_IgG)
#   mod=lm(log10_IgG~slope_median, data= sero_dat_dd)
#   abline(mod, col='red',lwd=3)
#   print(summary(mod))
#   if(dd>0){
#     plot(sero_dat_dd$slope_median, sero_dat_dd$Delta_IgG, xlab='slope',
#        ylab='Delta IgG', main= paste('Day',dd), panel.first=grid(),
#        ylim = range(sero_dat$Delta_IgG,na.rm=T))
#   }
# }
# 
# 
# sero_wide = 
#   sero_dat %>% pivot_wider(names_from = Day, 
#                                      values_from = c(log10_IgG,Delta_IgG),
#                                      values_fill = NA,
#                                      values_fn = mean)
# 
# par(mfrow=c(2,2))
# sero_no_increase = sero_dat%>% filter(Day>=7 & log10_IgG<=4)
# plot_individ_curves(platcov_dat = platcov_dat, IDs = unique(sero_no_increase$ID),xlims = c(0,14))
```

```{r coef_plot}
coef_to_plot=1
coef_model = which(model_settings$prior==1&
                     model_settings$cov_matrices==coef_to_plot&
                     model_settings$mod==all_mods[2])
load(ff[coef_model])
par(las=1, mfrow=c(1,2), mar=c(5,7,2,2))
plot_coef_effects(stan_out = out,cov_mat = coef_to_plot,stan_inputs = stan_inputs)
```

## Individual patient data

```{r}

# IDS_slow = slope_out$ID[which(slope_out$t_12_med>13 & slope_out$Trt=='Ensitrelvir')]
# # slope_out$ID[IDS_slow]
# par(mfrow=c(3,3),las=1, mar=c(4,5,2,2))
# plot_individ_curves(platcov_dat = platcov_dat, IDs = IDS_slow,
#                     xlims = c(0,14))
# # model_list = list()
# for(i in 1:length(ff)){
#   load(ff[i])
#   model_list[[i]] = out
# }
# 
# ID_map = merge(stan_inputs$ID_map, Baseline_data, by.x = 'ID_key',by.y = 'ID')
# par(mfrow=c(4,4), mar=c(4,4,2,2),las=1)
# plot_data_model_fits(model_list = model_list, 
#                      models_to_plot = 1:2,
#                      K_plots = 16,mod_cols = model_cols,
#                      ID_map = ID_map,
#                      analysis_data_stan = stan_inputs$analysis_data_stan)
```
